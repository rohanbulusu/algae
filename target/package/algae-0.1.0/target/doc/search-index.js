var searchIndex = JSON.parse('{\
"algae":{"doc":"","t":[0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,3,13,8,13,13,13,3,13,4,4,13,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["algaeset","magma","mapping","AlgaeSet","all","borrow","borrow_mut","from","has","into","mono","new","try_from","try_into","type_id","Magma","borrow","borrow_mut","cache","from","input_history","into","new","operation","properties","try_from","try_into","type_id","Abelian","AbelianOperation","Associative","AssociativeOperation","AssociativityError","BinaryOperation","Commutative","CommutativityError","IdentityError","IdentityOperation","Other","PropertyError","PropertyType","WithIdentity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","cache","cache","eq","fmt","fmt","from","from","from","from","from","holds_over","input_history","input_history","input_history","input_history","into","into","into","into","into","is","new","new","new","operation","operation","operation","operation","properties","properties","properties","properties","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with","0","0"],"q":["algae","","","algae::algaeset","","","","","","","","","","","","algae::magma","","","","","","","","","","","","","algae::mapping","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","algae::mapping::PropertyError","algae::mapping::PropertyType"],"d":["","","","","Returns an AlgaeSet defined purely by the underlying type E","","","Returns the argument unchanged.","Returns whether or not <code>element</code> is in the given set","Calls <code>U::from(self)</code>.","Returns an AlgaeSet defined by a single condition","","","","","A set with an associated binary operation.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","A function wrapper enforcing commutativity.","","A function wrapper enforcing associativity.","","Common interface for all Algae operations.","","","","A function wrapper enforcing identity existence.","","","","","","","","","","","","","","","Caches the given <code>input</code> to the operation’s input history","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to a Vec of all previous inputs to the …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether or not <code>property</code> is enforced by the given …","","","","Returns a reference to the function underlying the …","","","","Vec of all enforced properties","","","","","","","","","","","","","","","","","","","","Returns the result of performing the given operation.","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,11,11,11,11,11,11,11,11,11,11,11,11,13,0,13,0,17,0,13,17,17,0,17,0,0,13,14,15,16,17,13,14,15,16,17,13,12,14,15,16,13,17,17,14,15,16,17,13,13,12,14,15,16,14,15,16,17,13,12,14,15,16,12,14,15,16,12,14,15,16,17,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,12,22,23],"f":[0,0,0,0,[[],1],[[]],[[]],[[]],[[[1,[[0,[2,3]]]],[0,[2,3]]],4],[[]],[[[6,[5]]],1],[[[7,[[6,[5]]]]],1],[[],8],[[],8],[[],9],0,[[]],[[]],[[[11,[[0,[2,10]]]],[0,[2,10]]]],[[]],[[[11,[[0,[2,10]]]]],7],[[]],[[1,12],11],[[[11,[[0,[2,10]]]]],5],[[[11,[[0,[2,10]]]]],[[7,[[13,[[0,[2,10]]]]]]]],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[[0,[2,10]]]],[0,[2,10]]]],[[[15,[[0,[2,10]]]],[0,[2,10]]]],[[[16,[[0,[2,10]]]],[0,[2,10]]]],[[[13,[10]],13],4],[[17,18],19],[[17,18],[[8,[20]]]],[[]],[[]],[[]],[[]],[[]],[[[13,[[0,[2,10]]]],5,7],4],[[],7],[[[14,[[0,[2,10]]]]],7],[[[15,[[0,[2,10]]]]],7],[[[16,[[0,[2,10]]]]],7],[[]],[[]],[[]],[[]],[[]],[13,4],[5,14],[5,15],[5,16],[[],5],[[[14,[[0,[2,10]]]]],5],[[[15,[[0,[2,10]]]]],5],[[[16,[[0,[2,10]]]]],5],[[],[[7,[13]]]],[[[14,[[0,[2,10]]]]],[[7,[[13,[[0,[2,10]]]]]]]],[[[15,[[0,[2,10]]]]],[[7,[[13,[[0,[2,10]]]]]]]],[[[16,[[0,[2,10]]]]],[[7,[[13,[[0,[2,10]]]]]]]],[[],21],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],[[8,[17]]]],0,0],"p":[[3,"AlgaeSet"],[8,"Copy"],[8,"Clone"],[15,"bool"],[8,"Fn"],[3,"Box"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[8,"PartialEq"],[3,"Magma"],[8,"BinaryOperation"],[4,"PropertyType"],[3,"AbelianOperation"],[3,"AssociativeOperation"],[3,"IdentityOperation"],[4,"PropertyError"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"String"],[13,"Other"],[13,"WithIdentity"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
